import os
import pandas as pd
import config as cfg

def read_prc_csv(tic):
    csv_file_name = f"{tic.lower()}_prc.csv"
    csv_file_path = os.path.join(cfg.DATADIR, csv_file_name)
    df = pd.read_csv(csv_file_path)
    df = cfg.standardise_colnames(df)
    df['date'] = pd.to_datetime(df['date'])
    df.set_index('date', inplace=True)
    return df

def mk_prc_df(tickers, prc_col='adj_close'):
    price_data = pd.DataFrame()  
    for ticker in tickers:
        df = read_prc_csv(ticker)
        df = df[[prc_col]]
        df.rename(columns={prc_col: ticker.lower()}, inplace=True)
        if price_data.empty:
            price_data = df
        else:
            price_data = price_data.join(df, how='outer')
    return price_data


def mk_ret_df(prc_df):
    prc_df_sorted = prc_df.sort_index()
    stock_returns = prc_df_sorted.pct_change()
    market_returns = pd.read_csv(cfg.FF_CSV)
    market_returns['Date'] = pd.to_datetime(market_returns['Date'])
    market_returns.set_index('Date', inplace=True)
    market_returns_sorted = market_returns.sort_index()
    returns_data = stock_returns.join(market_returns_sorted['mkt'], how='inner')
    return returns_data


def mk_aret_df(ret_df):
    cols = ret_df.iloc[:, :-1].columns
    for a in cols:
        ret_df[a] = ret_df[a] - ret_df['mkt']
    oc = ret_df.iloc[:, :-1]
    return oc


def get_avg(df, col, year):
    df['time'] = df.index
    records = df.loc[df['time'].dt.year == year]
    oc = records[col].mean()
    return oc


def get_ew_rets(df, tickers):
    ans = df[tickers]
    oc = ans.mean(axis=1)
    return oc


def get_ann_ret(ser, start, end):
    x = ser.dropna(axis=0)
    date = pd.date_range(start=start, end=end)
    x1 = x.add(1)
    return (x1[date].prod())**(252 / len(date)) - 1


def _test_print(obj, msg=None):
    import pprint as pp
    sep = '-'*40
    if isinstance(obj, str):
        prt = obj
    else:
        prt = pp.pformat(obj)
        prt = f'{prt}\n\nObj type is: {type(obj)}'
    if msg is not None:
        prt = f'{msg}\n\n{prt}'
    to_print = [
        '',
        sep,
        prt,
        ]
    print('\n'.join(to_print))
    if isinstance(obj, pd.DataFrame):
        print('')
        obj.info()
    print(sep)


def _test_cfg():
    parent = os.path.dirname(cfg.DATADIR)
    to_print = f'''
The variable `parent` should point to the project2 folder:
  parent: '{parent}'
  Folder exists: '{os.path.exists(parent)}'

The data folder for this project is located at:
  cfg.DATADIR: '{cfg.DATADIR}'
  Folder exists: '{os.path.exists(cfg.DATADIR)}'
  _test_print(to_print.strip())


def _test_read_prc_csv():
    tic = 'TSLA'
    df = read_prc_csv(tic)
    _test_print(df)


def _test_mk_prc_df():
    tickers = ['AAPL', 'TSLA']
    prc_df = mk_prc_df(tickers, prc_col='adj_close')
    _test_print(prc_df)

def _test_mk_ret_df():
    prc_df = pd.DataFrame({
        'aapl': [
            121.09, 
            121.19, 
            120.70, 
            119.01,
            124.40, 
            ],
        'tsla': [
            446.64, 
            461.29, 
            448.88, 
            439.67,
            None, 
            ],
        },
        index=pd.to_datetime([
            '2020-10-13', 
            '2020-10-14', 
            '2020-10-15', 
            '2020-10-16',
            '2020-10-12', 
            ],
        ))
    msg = "The input data frame `prc_df` is:"
    _test_print(prc_df, msg=msg)

    msg = "The output data frame `ret_df` is:"
    ret_df = mk_ret_df(prc_df)
    _test_print(ret_df, msg=msg)


def _test_mk_aret_df():
    idx = pd.to_datetime([
        '2020-10-12', 
        '2020-10-13', 
        '2020-10-14', 
        '2020-10-15', 
        '2020-10-16', 
        ])
    aapl = [
        None, 
        -0.026608, 
         0.000826, 
        -0.004043, 
        -0.014002, 
        ]
    tsla = [
        None, 
        None,
         0.032800,
        -0.026903,
        -0.020518,
        ]
    mkt = [
      0.0153,
     -0.0041,
     -0.0065,
     -0.0008,
     -0.0006,
     ]
    ret_df = pd.DataFrame({'aapl': aapl, 'tsla': tsla, 'mkt': mkt,}, index=idx)
    _test_print(ret_df)

    aret_df = mk_aret_df(ret_df)
    _test_print(aret_df)


def _test_get_avg():
    prc = pd.Series({
        '2019-01-01': 1.0,
        '2019-01-02': 2.0,
        '2020-10-02': 4.0,
        '2020-11-12': 4.0,
        })
    df = pd.DataFrame({'some_tic': prc})
    df.index = pd.to_datetime(df.index)
    
    msg = 'This is the test data frame `df`:'
    _test_print(df, msg)


    res = get_avg(df, 'some_tic', 2019)
    to_print = [
            "This means `res =get_avg(df, col='some_tic', year=2019) --> 1.5",
            f"The value of `res` is {res}",
            ]
    _test_print('\n'.join(to_print))
    

def _test_get_ew_rets():
    tic1 = [1.0, 2.0, 1.0, 2.0,]
    tic2 = [2.0, None, 2.0, 1.0,]
    tic3 = [99, 99, 99, 99,]
    idx = pd.to_datetime(['2019-01-01', '2019-01-02', '2020-10-02', '2020-11-12'])
    df = pd.DataFrame({'tic1': tic1, 'tic2': tic2, 'tic3': tic3}, index=idx)
    msg = 'This is the test data frame `df`:'
    _test_print(df, msg)

    ew_ret = get_ew_rets(df, ['tic1', 'tic2'])
    msg = "The output of get_ew_rets(df, ['tic1', 'tic2']) is:"
    _test_print(ew_ret, msg)



def _mk_test_ser():
    tot_ret = 1.5
    n = 400
    start = '2010-01-01'
    daily_yield = tot_ret**(1.0/n)-1
    exp_res = tot_ret ** (252./n) - 1

    start_dt = pd.to_datetime(start)
    days_to_add = pd.to_timedelta([x for x in range(400)], unit='day')
    idx = start_dt + days_to_add

    ser = pd.Series([daily_yield]*n, index=idx)

    end = ser.index.max().strftime('%Y-%m-%d')
    
    to_print = [
            f"Given the parameters:",
            f"   - tot_ret is {tot_ret}",
            f"   - N is {n}",
            f"   - start is '{start}'",
            f"   - end is '{end}'",
            f" For the period from '{start}' to '{end}'",
            f" the annualised return is: {exp_res}",
            "",
            f"For this `ser`, `get_ann_ret(ser, '{start}', '{end}')` --> {exp_res}",
            ]
    print('\n'.join(to_print))

    start_dt, end_dt = ser.index.min(), ser.index.max()

    idx_bef = start_dt + pd.to_timedelta([-3, -2, -1], unit='day')
    ser_bef = pd.Series([-99]*len(idx_bef), index=idx_bef)

    idx_after = end_dt + pd.to_timedelta([1, 2, 3], unit='day')
    ser_after = pd.Series([99]*len(idx_after), index=idx_after)

    ser = pd.concat([ser_bef, ser, ser_after])

    res = get_ann_ret(ser, start, end)
    print(res)

    return ser


def _test_get_ann_ret():
    tot_ret = 1.5
    n = 400
    start = '2010-01-01'
    daily_yield = tot_ret ** (1.0/n) - 1
    print(daily_yield)

    expected_res = tot_ret ** (252./n) - 1

    n_days = pd.to_timedelta([x for x in range(n)], unit='day')
    dt_idx = pd.to_datetime(start) + n_days

    end = dt_idx.max().strftime('%Y-%m-%d')

    ser = pd.Series([daily_yield] * n, index=dt_idx)

    dt_bef_idx = pd.to_datetime(start) + pd.to_timedelta([-3, -2, -1], unit='day')
    ser_before = pd.Series([-99]*3, index=dt_bef_idx)


    dt_after_idx = pd.to_datetime(end) + pd.to_timedelta([1, 2, 3], unit='day')
    ser_after = pd.Series([-99]*3, index=dt_after_idx)

    ser = pd.concat([ser_before, ser, ser_after])


    msg = 'This is the test ser `ser`:'
    _test_print(ser, msg)

    res = get_ann_ret(ser, start, end)
    to_print = [
        f"This means `res = get_ann_ret(ser, start='{start}', end='{end}') --> {expected_res}",
        f"The value of `res` is {res}",
        ]
    _test_print('\n'.join(to_print))


if __name__ == "__main__":
    pass
    #_test_cfg()
    #_test_read_prc_csv()
    #_test_mk_prc_df()
    #_test_mk_ret_df()
    #_test_mk_aret_df()
    #_test_get_avg()
    #_test_get_ew_rets()
    #_test_get_ann_ret()
