""" zid_project1.py"""

import json
import os
import toolkit_config as cfg

ROOTDIR = os.path.join(cfg.PRJDIR, "project1")
DATDIR = os.path.join(ROOTDIR, "data")
TICPATH = os.path.join(ROOTDIR, 'TICKERS.txt')

COLUMNS = ['Volume', 'Date', 'Adj Close', 'Close', 'Open', 'High']
COLWIDTHS = {'Volume': 14, 'Date': 11, 'Adj Close': 19, 'Close': 10, 'Open': 6, 'High': 20}

def get_tics(pth):
    tickers = {}  # initialize an empty dictionary
    with open(pth, mode='r') as file:  # open file
        for line in file:  # for loop each line
            line = line.lower().strip()  # lower case, remove leading and trading spaces
            if len(line) > 0:   # if line is not empty
                exchange, tic = [part.strip('"') for part in line.split("=")]
                # split that line into 2 parts by '='
                # remove ""
                # assign first element to 'exchange'
                tickers[tic] = exchange
    return tickers

def read_dat(tic):
    dat_file_path = os.path.join(DATDIR, f"{tic}_prc.dat")
    with open(dat_file_path, 'r') as file:
        lines_list = [line.strip for line in file]
        return lines_list

def line_to_dict(line):
    COLUMNS_dict = {}
    for column in COLUMNS:
        w = COLWIDTHS[column]
        value = line[:w].strip
        COLUMNS_dict[column] = value
        line = line[w:]
    return COLUMNS_dict

def verify_tickers(tic_exchange_dic, tickers_lst=None):
    if tickers_lst is not None:
        if tickers_lst == []:
            raise Exception("tickers_lst is an empty list.")
        for ticker in tickers_lst:
            if ticker.lower() not in tic_exchange_dic:
                raise Exception(f"{ticker} is a invalid ticker.")
    return

def verify_cols(col_lst=None):
    if col_lst is not None:
        if col_lst == []:
            raise Exception("col_lst is an empty list.")
        for column in col_lst:
            if column.capitalize() not in COLUMNS:
                raise Exception(f"{col} is not a valid column.")
    return


def create_data_dict(tic_exchange_dic, tickers_lst=None, col_lst=None):
    if tickers_lst is not None:
        verify_tickers(tic_exchange_dic, tickers_lst)  # Verify tickers
    if col_lst is not None:
        verify_cols(col_lst)  # Verify columns
    data_dict = {}
    for tic in tic_exchange_dic:
        if tickers_lst is None or tic in tickers_lst:
            exchange = tic_exchange_dic[tic].lower()
            data = read_dat(tic)
            data_dict[tic] = {'exchange': exchange, 'data': []}
            for line in data:
                line_data = line_to_dict(line)
                if col_lst is not None:
                    # Filter the dictionary to include only the desired columns
                    line_data = {col: line_data[col] for col in col_lst if col in line_data}
                data_dict[tic]['data'].append(line_data)
    return data_dict

def create_json(data_dict, pth):
    with open(pth, 'w') as json_file:
        json.dump(data_dict, json_file)


def _test_get_tics():
    pth = TICPATH
    tics = get_tics(pth)
    print(tics)


def _test_read_dat():
    pth = TICPATH
    tics = sorted(list(get_tics(pth).keys()))
    tic = tics[0]
    lines = read_dat(tic)
    print(f'The first line in the dat file for {tic} is:')
    print(lines[0])


def _test_line_to_dict():
    pth = TICPATH
    tics = sorted(list(get_tics(pth).keys()))
    lines = read_dat(tics[0])
    dic = line_to_dict(lines[0])
    print(dic)


def _test_create_data_dict():
    """ Test function for the `create_data_dict` function. This function will perform
    the following operations:
    - Get the tickers using `get_tics`
    - Call `create_data_dict` using
        - tickers_lst =  ['aapl', 'baba']
        - col_lst = ['Date', 'Close']
    - Print out the dictionary returned, but only the first 3 items of the data list for each ticker for brevity
    """
    pth = TICPATH
    tic_exchange_dic = get_tics(pth)
    tickers_lst = ['aapl', 'baba']
    col_lst = ['Date', 'Close']
    data_dict = create_data_dict(tic_exchange_dic, tickers_lst, col_lst)

    for tic in tickers_lst:
        data_dict[tic]['data'] = data_dict[tic]['data'][:3]

    print(data_dict)


def _test_create_json(json_pth):
    """ Test function for the `create_json_ function.
    This function will save the dictionary returned by `create_data_dict` to the path specified.
    """
    pth = TICPATH
    tic_exchange_dic = get_tics(pth)
    tickers_lst = ['aapl', 'baba']
    col_lst = ['Date', 'Close']
    data_dict = create_data_dict(tic_exchange_dic, tickers_lst, col_lst)
    create_json(data_dict, json_pth)
    print(f'Data saved to {json_pth}')

if __name__ == "__main__":
    _test_get_tics()
    _test_read_dat()
    _test_line_to_dict()
    _test_create_data_dict()
    _test_create_json(os.path.join(DATDIR, 'data.json'))  # Save the file to data/data.json
    pass
